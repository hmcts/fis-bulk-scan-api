plugins {
id 'application'
id 'checkstyle'
id 'pmd'
id 'jacoco'
id 'io.spring.dependency-management' version '1.1.7'
id 'org.springframework.boot' version '2.7.18'
id 'org.owasp.dependencycheck' version '9.0.4'
id 'com.github.ben-manes.versions' version '0.52.0'
id 'org.sonarqube' version '3.5.0.2730'
id 'com.diffplug.spotless' version '6.25.0'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'
spotless {

  java {
    target 'src/**/*.java'
    importOrder()
    removeUnusedImports()
    trimTrailingWhitespace()
    indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
    endWithNewline()
    googleJavaFormat('1.11.0').aosp().reflowLongStrings()

  }
}

java {
toolchain {
	languageVersion = JavaLanguageVersion.of(17)
}
}

sourceSets {
functionalTest {
	java {
	compileClasspath += main.output
	runtimeClasspath += main.output
	srcDir file('src/functionalTest/java')
	}
}

integrationTest {
	java {
	compileClasspath += main.output
	runtimeClasspath += main.output
	srcDir file('src/integrationTest/java')
	}
}

smokeTest {
	java {
	compileClasspath += main.output
	runtimeClasspath += main.output
	srcDir file('src/smokeTest/java')
	}
	resources.srcDir file('src/smokeTest/resources')
}
}

configurations {
functionalTestImplementation.extendsFrom testImplementation
functionalTestRuntimeOnly.extendsFrom runtimeOnly

integrationTestImplementation.extendsFrom testImplementation
integrationTestRuntimeOnly.extendsFrom runtimeOnly

smokeTestImplementation.extendsFrom testImplementation
smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile) {
options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
useJUnitPlatform()

testLogging {
	exceptionFormat = 'full'
}
}

test {
failFast = true
}

task functional(type: Test) {
description = "Runs functional tests"
group = "Verification"
testClassesDirs = sourceSets.functionalTest.output.classesDirs
classpath = sourceSets.functionalTest.runtimeClasspath
failFast = true
}

task integration(type: Test) {
description = "Runs integration tests"
group = "Verification"
testClassesDirs = sourceSets.integrationTest.output.classesDirs
classpath = sourceSets.integrationTest.runtimeClasspath
failFast = true
}

task smoke(type: Test) {
description = "Runs Smoke Tests"
testClassesDirs = sourceSets.smokeTest.output.classesDirs
classpath = sourceSets.smokeTest.runtimeClasspath
failFast = true
}

checkstyle {
maxWarnings = 0
toolVersion = '9.3'
getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
toolVersion = "6.41.0"
sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest, sourceSets.smokeTest]
reportsDir = file("$project.buildDir/reports/pmd")
// https://github.com/pmd/pmd/issues/876
ruleSets = []
ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
executionData(test, integration)
reports {
	xml.required = true
	csv.required = false
	xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
}
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

def sonarExclusions = [
		'**uk/gov/hmcts/reform/bulkscan/model/**',
		'**uk/gov/hmcts/reform/bulkscan/config/**',
		'**uk/gov/hmcts/reform/bulkscan/constants/**',
		'**uk/gov/hmcts/reform/bulkscan/enums/**'
]

sonarqube {
  properties {
    property "sonar.projectName", "fis :: fis-bulk-scan-api"
	  property "sonar.projectKey", "uk.gov.hmcts.reform:fis-bulk-scan-api"
    property "sonar.exclusions", sonarExclusions.join(", ")
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
def isNonStable = { String version ->
	def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
	def regex = /^[0-9,.v-]+$/
	return !stableKeyword && !(version ==~ regex)
}
rejectVersionIf { selection -> // <---- notice how the closure argument is named
	return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
}
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
suppressionFile = 'config/owasp/suppressions.xml'
outputDirectory = 'build/reports/'

analyzers {
	// Disable scanning of .NET related binaries
	assemblyEnabled = false
}
/*skipConfigurations = [
	"checkstyle",
	"compileOnly",
	"pmd",
	"integrationTest",
	"functionalTest",
	"smokeTest",
	"contractTestRuntimeClasspath",
	"contractTestCompileClasspath"
]*/
}

repositories {
mavenLocal()
mavenCentral()
maven { url 'https://jitpack.io' }
jcenter()
}

def versions = [
springfoxSwagger  : '3.0.0',
s2sClient         : '4.0.3',
springCloud       : '3.1.10',
commonsIo         :  '2.7',
reformsJavaLogging: '6.1.8'
]

ext {
log4JVersion = "2.24.3"
}

dependencyManagement {

  dependencies {

    //CVE-2022-25857
    dependency group: 'org.yaml',name: 'snakeyaml', version: '1.33'

  }
}

dependencies {
compileOnly("org.projectlombok:lombok:1.18.36")
testCompileOnly("org.projectlombok:lombok:1.18.36")
annotationProcessor("org.projectlombok:lombok:1.18.36")
testAnnotationProcessor("org.projectlombok:lombok:1.18.36")

implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'

implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap', version: versions.springCloud

//implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: versions.s2sClient
implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: versions.s2sClient

implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.8.0'

//implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformsJavaLogging
//implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformsJavaLogging
//implementation group: 'uk.gov.hmcts.reform', name: 'logging-spring', version: versions.reformsJavaLogging
implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformsJavaLogging
implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: versions.reformsJavaLogging

implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.8'

implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion
implementation 'org.projectlombok:lombok:1.18.36'
//implementation group: 'io.springfox', name: 'springfox-boot-starter', version: '3.0.0'
implementation group: 'io.springfox', name: 'springfox-swagger2', version: '3.0.0'
implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '3.0.0'
implementation group: 'io.springfox', name: 'springfox-spring-webflux', version: '3.0.0'
implementation 'junit:junit:4.13.2'

implementation group: 'commons-io', name: 'commons-io', version: '2.18.0'

implementation(group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: versions.springCloud)
	{
	exclude group: 'io.reactivex', module: 'io.reactivex'
	exclude group: 'io.reactivex', module: 'rxnetty'
	exclude group: 'io.reactivex', module: 'rxnetty-contexts'
	exclude group: 'io.reactivex', module: 'rxnetty-servo'
	}
implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version:'7.4'
//functionalTestImplementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: versions.s2sClient
functionalTestImplementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: versions.s2sClient


testImplementation(platform('org.junit:junit-bom:5.11.4'))
testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: versions.springCloud
testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
	exclude group: 'junit', module: 'junit'
	exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
}

testImplementation group: 'io.rest-assured', name: 'rest-assured'


// Integration test
integrationTestImplementation(group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: versions.springCloud)
	{
	exclude group: 'io.reactivex', module: 'io.reactivex'
	exclude group: 'io.reactivex', module: 'rxnetty'
	exclude group: 'io.reactivex', module: 'rxnetty-contexts'
	exclude group: 'io.reactivex', module: 'rxnetty-servo'
	}
}

mainClassName = 'uk.gov.hmcts.reform.bulkscan.Application'

ext.getVaultSecret = { String secretName ->
  new ByteArrayOutputStream().withStream { os ->
    exec {
      commandLine 'az', 'keyvault', 'secret', 'show', '--vault-name', 'fis-kv-aat', '-o', 'tsv', '--query', 'value', '--name', secretName
      standardOutput = os
    }
    return os.toString().replace('\n', '')
  }
}

bootRun {
doFirst() {
	println("Loading secrets from vault")
	systemProperty 'APP_INSIGHTS_KEY', getVaultSecret('AppInsightsInstrumentationKey')
	systemProperty 'POST_CODE_LOOKUP_KEY', getVaultSecret('postcode-lookup-token')
	}
}

bootJar {
archiveFileName = "fis-bulk-scan-api.jar"

manifest {
	attributes('Implementation-Version': project.version.toString())
}
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
duplicatesStrategy = 'include'
}

wrapper {
distributionType = Wrapper.DistributionType.ALL
}
